{
  "version": 4,
  "terraform_version": "1.11.4",
  "serial": 1,
  "lineage": "9d62c9ab-5175-0dd6-9e2e-8cb2ea74f654",
  "outputs": {
    "frontend_url": {
      "value": "http://eventbooking.local",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "all",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "apps/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/default/deployments/frontend-mvc-deployment",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "0632ec7033c1cb0a0230fee15e5d5d79a0f5af4535419fcc882638522c171d34",
            "live_uid": "11df0b92-3973-4c1e-bfd7-eab5ef3ccf6a",
            "name": "frontend-mvc-deployment",
            "namespace": null,
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "11df0b92-3973-4c1e-bfd7-eab5ef3ccf6a",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "# Frontend MVC deployment \r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: frontend-mvc-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: frontend-mvc\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: frontend-mvc\r\n    spec:\r\n      containers:\r\n      - name: frontend-mvc\r\n        image: houssemdocker/frontend-mvc:0.1\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 80\r\n        resources:\r\n          limits:\r\n            cpu: \"1\"\r\n            memory: \"200Mi\"\r\n          requests:\r\n            cpu: \"0.1\"\r\n            memory: \"100Mi\"\r\n        env:\r\n          - name: ApiGatewayUrl\r\n            value: http://104.45.20.246\r\n          - name: CatalogApiUrl\r\n            value: http://catalog-api-service\r\n          - name: BasketApiUrl\r\n            value: http://basket-api-service\r\n---\r\n# Frontend MVC service\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: frontend-mvc-service\r\nspec:\r\n  selector:\r\n    app: frontend-mvc\r\n  ports:\r\n  - protocol: TCP\r\n    port: 80\r\n    targetPort: 80\r\n  type: LoadBalancer\r\n---\r\n# Catalog API deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: catalog-api-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: catalog-api\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: catalog-api\r\n    spec:\r\n      containers:\r\n      - name: catalog-api\r\n        image: houssemdocker/catalog-api:0.1\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 80\r\n        resources:\r\n          limits:\r\n            cpu: \"1\"\r\n            memory: \"200Mi\"\r\n          requests:\r\n            cpu: \"0.1\"\r\n            memory: \"100Mi\"\r\n        env:\r\n          - name: ConnectionStrings__CatalogContext\r\n            value: \"Server=catalog-mssql-service;Database=CatalogContext;User Id=sa;Password=@Aa123456\"\r\n---\r\n# Catalog API sevice\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: catalog-api-service\r\nspec:\r\n  selector:\r\n    app: catalog-api\r\n  ports:\r\n  - protocol: TCP\r\n    port: 80\r\n    targetPort: 80\r\n  type: LoadBalancer\r\n---\r\n# Catalog MSSQL database deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: catalog-mssql-deployment\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: catalog-mssql\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: catalog-mssql\r\n    spec:\r\n      terminationGracePeriodSeconds: 10\r\n      containers:\r\n      - name: catalog-mssql\r\n        image: mcr.microsoft.com/mssql/server:2022-latest\r\n        resources:\r\n          limits:\r\n            cpu: \"2\"\r\n            memory: \"2Gi\"\r\n          requests:\r\n            cpu: \"0.5\"\r\n        ports:\r\n        - containerPort: 1433\r\n        env:\r\n        - name: ACCEPT_EULA\r\n          value: \"Y\"\r\n        - name: SA_PASSWORD\r\n          value: \"@Aa123456\"\r\n      #   volumeMounts:\r\n      #   - name: mssql-persistent-storage\r\n      #     mountPath: /var/opt/mssql\r\n      # volumes:\r\n      # - name: mssql-persistent-storage\r\n      #   persistentVolumeClaim:\r\n      #     claimName: mssql-pv-claim\r\n---\r\n# Catalog MSSQL database service\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: catalog-mssql-service\r\nspec:\r\n  selector:\r\n    app: catalog-mssql\r\n  ports:\r\n    - protocol: TCP\r\n      port: 1433\r\n      targetPort: 1433\r\n      nodePort: 30200\r\n  type: NodePort\r\n---\r\n# Basket API deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: basket-api-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: basket-api\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: basket-api\r\n    spec:\r\n      containers:\r\n      - name: basket-api\r\n        image: houssemdocker/basket-api:0.1\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 80\r\n        resources:\r\n          limits:\r\n            cpu: \"1\"\r\n            memory: \"200Mi\"\r\n          requests:\r\n            cpu: \"0.1\"\r\n            memory: \"100Mi\"\r\n        env:\r\n          - name: ConnectionStrings__BasketContext\r\n            value: \"Server=basket-mssql-service;Database=BasketContext;User Id=sa;Password=@Aa123456\"\r\n          - name: RedisCacheConnection\r\n            value: redis-service\r\n          - name: RabbitMqUri\r\n            value: amqp://guest:guest@rabbitmq-service//\r\n---\r\n# Basket API service\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: basket-api-service\r\nspec:\r\n  selector:\r\n    app: basket-api\r\n  ports:\r\n  - protocol: TCP\r\n    port: 80\r\n    targetPort: 80\r\n  type: LoadBalancer\r\n---\r\n# Basket MSSQL database deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: basket-mssql-deployment\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: basket-mssql\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: basket-mssql\r\n    spec:\r\n      terminationGracePeriodSeconds: 10\r\n      containers:\r\n      - name: basket-mssql\r\n        image: mcr.microsoft.com/mssql/server:2022-latest\r\n        resources:\r\n          limits:\r\n            cpu: \"2\"\r\n            memory: \"2Gi\"\r\n          requests:\r\n            cpu: \"0.5\"\r\n        ports:\r\n          - containerPort: 1433\r\n        env:\r\n          - name: ACCEPT_EULA\r\n            value: \"Y\"\r\n          - name: SA_PASSWORD\r\n            value: \"@Aa123456\"\r\n      #   volumeMounts:\r\n      #   - name: mssql-persistent-storage\r\n      #     mountPath: /var/opt/mssql\r\n      # volumes:\r\n      # - name: mssql-persistent-storage\r\n      #   persistentVolumeClaim:\r\n      #     claimName: mssql-pv-claim\r\n---\r\n# Basket MSSQL database service\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: basket-mssql-service\r\nspec:\r\n  selector:\r\n    app: basket-mssql\r\n  ports:\r\n    - protocol: TCP\r\n      port: 1433\r\n      targetPort: 1433\r\n      nodePort: 30300\r\n  type: NodePort\r\n---\r\n# RabbitMQ deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: rabbitmq-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: rabbitmq\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: rabbitmq\r\n    spec:\r\n      containers:\r\n      - name: rabbitmq\r\n        image: rabbitmq:3-management\r\n        ports:\r\n        - containerPort: 5672\r\n---\r\n# RabbitMQ sevice\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: rabbitmq-service\r\nspec:\r\n  selector:\r\n    app: rabbitmq\r\n  ports:\r\n  - protocol: TCP\r\n    port: 5672\r\n    #targetPort: 5672\r\n    #nodePort: 30672\r\n  type: ClusterIP\r\n---\r\n# RabbitMQ Management sevice\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: rabbitmq-management-service\r\nspec:\r\n  selector:\r\n    app: rabbitmq\r\n  ports:\r\n  - protocol: TCP\r\n    port: 15672\r\n    targetPort: 15672\r\n  type: LoadBalancer\r\n---\r\n# Orders WebJob deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: orders-webjob-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: orders-webjob\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: orders-webjob\r\n    spec:\r\n      containers:\r\n      - name: orders-webjob\r\n        image: houssemdocker/orders-webjob:0.1\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 80\r\n        env:\r\n          - name: RabbitMqUri\r\n            value: amqp://guest:guest@rabbitmq-service//\r\n---\r\n# Orders WebJob service\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: orders-webjob-service\r\nspec:\r\n  selector:\r\n    app: orders-webjob\r\n  ports:\r\n  - protocol: TCP\r\n    port: 80\r\n    targetPort: 80\r\n    nodePort: 30080\r\n  type: NodePort\r\n---\r\n# Prometheus deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: prometheus-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: prometheus\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: prometheus\r\n    spec:\r\n      containers:\r\n      - name: prometheus\r\n        image: prom/prometheus\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 9090\r\n---\r\n# Prometheus service\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: prometheus-service\r\nspec:\r\n  selector:\r\n    app: prometheus\r\n  ports:\r\n  - protocol: TCP\r\n    port: 9090\r\n    targetPort: 9090\r\n  type: LoadBalancer\r\n---\r\n# Grafana deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: grafana-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: grafana\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: grafana\r\n    spec:\r\n      containers:\r\n      - name: grafana\r\n        image: grafana/grafana\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 3000\r\n---\r\n# Grafana service\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: grafana-service\r\nspec:\r\n  selector:\r\n    app: grafana\r\n  ports:\r\n  - protocol: TCP\r\n    port: 3000\r\n    targetPort: 3000\r\n  type: LoadBalancer\r\n---\r\n# Konga deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: konga-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: konga\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: konga\r\n    spec:\r\n      containers:\r\n      - name: konga\r\n        image: pantsel/konga\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 1337\r\n        env:\r\n          - name: NODE_TLS_REJECT_UNAUTHORIZED # so that Konga can connect on kong's https.\r\n            value: \"0\"\r\n---\r\n# Konga service\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: konga-service\r\nspec:\r\n  selector:\r\n    app: konga\r\n  ports:\r\n  - protocol: TCP\r\n    port: 1337\r\n    targetPort: 1337\r\n  type: LoadBalancer\r\n---\r\n# Redis deployment\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: redis-deployment\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: redis\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: redis\r\n    spec:\r\n      containers:\r\n      - name: redis\r\n        image: redis:5.0.3\r\n        imagePullPolicy: Always\r\n        ports:\r\n        - containerPort: 6379\r\n---\r\n# Redis service\r\nkind: Service\r\napiVersion: v1\r\nmetadata:\r\n  name: redis-service\r\nspec:\r\n  selector:\r\n    app: redis\r\n  ports:\r\n  - protocol: TCP\r\n    port: 6379\r\n    targetPort: 6379\r\n  type: LoadBalancer\r\n\r\n\r\n---\r\napiVersion: networking.k8s.io/v1\r\nkind: Ingress\r\nmetadata:\r\n  name: eventbooking-ingress\r\n  annotations:\r\n    nginx.ingress.kubernetes.io/rewrite-target: /\r\nspec:\r\n  ingressClassName: nginx\r\n  rules:\r\n    - host: eventbooking.local\r\n      http:\r\n        paths:\r\n          - path: /\r\n            pathType: Prefix\r\n            backend:\r\n              service:\r\n                name: frontend-mvc-service\r\n                port:\r\n                  number: 80\r\n",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-mvc-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frontend-mvc\n  template:\n    metadata:\n      labels:\n        app: frontend-mvc\n    spec:\n      containers:\n      - env:\n        - name: ApiGatewayUrl\n          value: http://104.45.20.246\n        - name: CatalogApiUrl\n          value: http://catalog-api-service\n        - name: BasketApiUrl\n          value: http://basket-api-service\n        image: houssemdocker/frontend-mvc:0.1\n        imagePullPolicy: Always\n        name: frontend-mvc\n        ports:\n        - containerPort: 80\n        resources:\n          limits:\n            cpu: \"1\"\n            memory: 200Mi\n          requests:\n            cpu: \"0.1\"\n            memory: 100Mi\n",
            "yaml_incluster": "0632ec7033c1cb0a0230fee15e5d5d79a0f5af4535419fcc882638522c171d34"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
